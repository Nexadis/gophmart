// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	order "github.com/Nexadis/gophmart/internal/order"
	user "github.com/Nexadis/gophmart/internal/user"
	gomock "github.com/golang/mock/gomock"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserStore) AddUser(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserStoreMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserStore)(nil).AddUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockUserStore) GetUser(ctx context.Context, login string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStoreMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStore)(nil).GetUser), ctx, login)
}

// MockOrdersStore is a mock of OrdersStore interface.
type MockOrdersStore struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersStoreMockRecorder
}

// MockOrdersStoreMockRecorder is the mock recorder for MockOrdersStore.
type MockOrdersStoreMockRecorder struct {
	mock *MockOrdersStore
}

// NewMockOrdersStore creates a new mock instance.
func NewMockOrdersStore(ctrl *gomock.Controller) *MockOrdersStore {
	mock := &MockOrdersStore{ctrl: ctrl}
	mock.recorder = &MockOrdersStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersStore) EXPECT() *MockOrdersStoreMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersStore) AddOrder(ctx context.Context, o *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersStoreMockRecorder) AddOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersStore)(nil).AddOrder), ctx, o)
}

// GetAccruals mocks base method.
func (m *MockOrdersStore) GetAccruals(ctx context.Context, owner string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccruals", ctx, owner)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccruals indicates an expected call of GetAccruals.
func (mr *MockOrdersStoreMockRecorder) GetAccruals(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccruals", reflect.TypeOf((*MockOrdersStore)(nil).GetAccruals), ctx, owner)
}

// GetOrder mocks base method.
func (m *MockOrdersStore) GetOrder(ctx context.Context, number order.OrderNumber) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, number)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrdersStoreMockRecorder) GetOrder(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrdersStore)(nil).GetOrder), ctx, number)
}

// GetOrders mocks base method.
func (m *MockOrdersStore) GetOrders(ctx context.Context, owner string) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, owner)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersStoreMockRecorder) GetOrders(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrdersStore)(nil).GetOrders), ctx, owner)
}

// GetWithStatus mocks base method.
func (m *MockOrdersStore) GetWithStatus(ctx context.Context, s order.Status) ([]order.OrderNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithStatus", ctx, s)
	ret0, _ := ret[0].([]order.OrderNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithStatus indicates an expected call of GetWithStatus.
func (mr *MockOrdersStoreMockRecorder) GetWithStatus(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithStatus", reflect.TypeOf((*MockOrdersStore)(nil).GetWithStatus), ctx, s)
}

// UpdateOrder mocks base method.
func (m *MockOrdersStore) UpdateOrder(ctx context.Context, o *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersStoreMockRecorder) UpdateOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrdersStore)(nil).UpdateOrder), ctx, o)
}

// MockWithdrawalsStore is a mock of WithdrawalsStore interface.
type MockWithdrawalsStore struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalsStoreMockRecorder
}

// MockWithdrawalsStoreMockRecorder is the mock recorder for MockWithdrawalsStore.
type MockWithdrawalsStoreMockRecorder struct {
	mock *MockWithdrawalsStore
}

// NewMockWithdrawalsStore creates a new mock instance.
func NewMockWithdrawalsStore(ctrl *gomock.Controller) *MockWithdrawalsStore {
	mock := &MockWithdrawalsStore{ctrl: ctrl}
	mock.recorder = &MockWithdrawalsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalsStore) EXPECT() *MockWithdrawalsStoreMockRecorder {
	return m.recorder
}

// AddWithdrawal mocks base method.
func (m *MockWithdrawalsStore) AddWithdrawal(ctx context.Context, wd *order.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawal", ctx, wd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawal indicates an expected call of AddWithdrawal.
func (mr *MockWithdrawalsStoreMockRecorder) AddWithdrawal(ctx, wd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawal", reflect.TypeOf((*MockWithdrawalsStore)(nil).AddWithdrawal), ctx, wd)
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawalsStore) GetWithdrawals(ctx context.Context, owner string) ([]*order.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, owner)
	ret0, _ := ret[0].([]*order.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawalsStoreMockRecorder) GetWithdrawals(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawalsStore)(nil).GetWithdrawals), ctx, owner)
}

// GetWithdrawn mocks base method.
func (m *MockWithdrawalsStore) GetWithdrawn(ctx context.Context, owner string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawn", ctx, owner)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawn indicates an expected call of GetWithdrawn.
func (mr *MockWithdrawalsStoreMockRecorder) GetWithdrawn(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawn", reflect.TypeOf((*MockWithdrawalsStore)(nil).GetWithdrawn), ctx, owner)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockDatabase) AddOrder(ctx context.Context, o *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockDatabaseMockRecorder) AddOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockDatabase)(nil).AddOrder), ctx, o)
}

// AddUser mocks base method.
func (m *MockDatabase) AddUser(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabase)(nil).AddUser), ctx, user)
}

// AddWithdrawal mocks base method.
func (m *MockDatabase) AddWithdrawal(ctx context.Context, wd *order.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawal", ctx, wd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawal indicates an expected call of AddWithdrawal.
func (mr *MockDatabaseMockRecorder) AddWithdrawal(ctx, wd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawal", reflect.TypeOf((*MockDatabase)(nil).AddWithdrawal), ctx, wd)
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GetAccruals mocks base method.
func (m *MockDatabase) GetAccruals(ctx context.Context, owner string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccruals", ctx, owner)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccruals indicates an expected call of GetAccruals.
func (mr *MockDatabaseMockRecorder) GetAccruals(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccruals", reflect.TypeOf((*MockDatabase)(nil).GetAccruals), ctx, owner)
}

// GetOrder mocks base method.
func (m *MockDatabase) GetOrder(ctx context.Context, number order.OrderNumber) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, number)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockDatabaseMockRecorder) GetOrder(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockDatabase)(nil).GetOrder), ctx, number)
}

// GetOrders mocks base method.
func (m *MockDatabase) GetOrders(ctx context.Context, owner string) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, owner)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockDatabaseMockRecorder) GetOrders(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockDatabase)(nil).GetOrders), ctx, owner)
}

// GetUser mocks base method.
func (m *MockDatabase) GetUser(ctx context.Context, login string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabase)(nil).GetUser), ctx, login)
}

// GetWithStatus mocks base method.
func (m *MockDatabase) GetWithStatus(ctx context.Context, s order.Status) ([]order.OrderNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithStatus", ctx, s)
	ret0, _ := ret[0].([]order.OrderNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithStatus indicates an expected call of GetWithStatus.
func (mr *MockDatabaseMockRecorder) GetWithStatus(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithStatus", reflect.TypeOf((*MockDatabase)(nil).GetWithStatus), ctx, s)
}

// GetWithdrawals mocks base method.
func (m *MockDatabase) GetWithdrawals(ctx context.Context, owner string) ([]*order.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, owner)
	ret0, _ := ret[0].([]*order.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockDatabaseMockRecorder) GetWithdrawals(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockDatabase)(nil).GetWithdrawals), ctx, owner)
}

// GetWithdrawn mocks base method.
func (m *MockDatabase) GetWithdrawn(ctx context.Context, owner string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawn", ctx, owner)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawn indicates an expected call of GetWithdrawn.
func (mr *MockDatabaseMockRecorder) GetWithdrawn(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawn", reflect.TypeOf((*MockDatabase)(nil).GetWithdrawn), ctx, owner)
}

// Open mocks base method.
func (m *MockDatabase) Open(Addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", Addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockDatabaseMockRecorder) Open(Addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDatabase)(nil).Open), Addr)
}

// UpdateOrder mocks base method.
func (m *MockDatabase) UpdateOrder(ctx context.Context, o *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockDatabaseMockRecorder) UpdateOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockDatabase)(nil).UpdateOrder), ctx, o)
}
